openapi: "3.0.2"
info:
  title: LPA Store
  version: "1.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://lpa-store.api.opg.service.justice.gov.uk
    description: Production
  - url: https://preproduction.lpa-store.api.opg.service.justice.gov.uk
    description: Preproduction
  - url: https://development.lpa-store.api.opg.service.justice.gov.uk
    description: Development
security:
  - {}
x-json-schema-faker:
  alwaysFakeOptionals: false
  optionalsProbability: 0.5
paths:
  /lpas/{uid}:
    parameters:
      - name: uid
        in: path
        required: true
        description: The UID of the case
        schema:
          type: string
          pattern: "M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})"
          example: M-789Q-P4DF-4UX3
    put:
      operationId: putLpa
      summary: Store an LPA
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitialLpa"
      responses:
        "201":
          description: Case created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
      x-amazon-apigateway-auth:
        type: "AWS_IAM"
      x-amazon-apigateway-integration:
        uri: ${lambda_create_invoke_arn}
        httpMethod: "POST"
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
    get:
      operationId: getLpa
      summary: Retrieve an LPA
      responses:
        "200":
          description: Case found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lpa"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "404":
          description: Case not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
      x-amazon-apigateway-auth:
        type: "AWS_IAM"
      x-amazon-apigateway-integration:
        uri: ${lambda_get_invoke_arn}
        httpMethod: "POST"
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
  /lpas/{uid}/updates:
    parameters:
      - name: uid
        in: path
        required: true
        description: The UID of the case
        schema:
          type: string
          pattern: "M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})"
          example: M-789Q-P4DF-4UX3
    post:
      operationId: createUpdate
      summary: Update an LPA
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update"
      responses:
        "201":
          description: Update created
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
      x-amazon-apigateway-auth:
        type: "AWS_IAM"
      x-amazon-apigateway-integration:
        uri: ${lambda_update_invoke_arn}
        httpMethod: "POST"
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
  /health-check:
    get:
      operationId: healthCheck
      summary: Health check endpoint for external services to consume
      responses:
        "200":
          description: Healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                additionalProperties: false
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Unhealthy
                additionalProperties: false
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: 200
            responseTemplates:
              application/json: '{"status":"ok", "statusCode":200}'
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_templates"

components:
  schemas:
    AbstractError:
      type: object
      required:
        - code
        - detail
      properties:
        code:
          type: string
        detail:
          type: string
    BadRequestError:
      allOf:
        - $ref: "#/components/schemas/AbstractError"
        - type: object
          properties:
            code:
              enum: ["INVALID_REQUEST"]
            errors:
              type: array
              items:
                type: object
                required:
                  - source
                  - detail
                properties:
                  source:
                    type: string
                    format: jsonpointer
                  detail:
                    type: string
              example:
                - source: "/uid"
                  detail: "invalid uid format"
    NotFoundError:
      allOf:
        - $ref: "#/components/schemas/AbstractError"
        - type: object
          properties:
            code:
              enum: ["NOT_FOUND"]
    Lpa:
      allOf:
        - $ref: "#/components/schemas/InitialLpa"
      type: object
      required:
        - uid
        - status
        - registrationDate
        - updatedAt
      properties:
        uid:
          type: string
          pattern: M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})
          example: M-789Q-P4DF-4UX3
        status:
          type: string
          enum:
            - processing
            - registered
        registrationDate:
          type: string
          format: date
          nullable: true
        updatedAt:
          type: string
          format: date
      additionalProperties: false
    InitialLpa:
      type: object
      required:
        - lpaType
        - donor
        - attorneys
        - certificateProvider
        - signedAt
      properties:
        lpaType:
          type: string
          enum:
            - property-and-affairs
            - personal-welfare
        donor:
          $ref: "#/components/schemas/Donor"
        attorneys:
          type: array
          items:
            $ref: "#/components/schemas/Attorney"
          minLength: 1
        trustCorporations:
          type: array
          items:
            $ref: "#/components/schemas/TrustCorporation"
        certificateProvider:
          $ref: "#/components/schemas/CertificateProvider"
        peopleToNotify:
          type: array
          items:
            $ref: "#/components/schemas/PersonToNotify"
        howAttorneysMakeDecisions:
          type: string
          enum:
            - jointly
            - jointly-and-severally
            - jointly-for-some-severally-for-others
        howAttorneysMakeDecisionsDetails:
          type: string
        howReplacementAttorneysMakeDecisions:
          type: string
          enum:
            - jointly
            - jointly-and-severally
            - jointly-for-some-severally-for-others
        howReplacementAttorneysMakeDecisionsDetails:
          type: string
        howReplacementAttorneysStepIn:
          type: string
          enum:
            - all-can-no-longer-act
            - one-can-no-longer-act
            - another-way
        howReplacementAttorneysStepInDetails:
          type: string
        whenTheLpaCanBeUsed:
          type: string
          enum:
            - when-capacity-lost
            - when-has-capacity
        lifeSustainingTreatmentOption:
          type: string
          enum:
            - option-a
            - option-b
        restrictions:
          type: string
        signedAt:
          type: string
          format: date-time
      additionalProperties: false
    Address:
      type: object
      required:
        - line1
        - town
        - country
      properties:
        line1:
          type: string
          x-faker: address.streetAddress
        line2:
          type: string
          x-faker: address.streetName
        line3:
          type: string
          x-faker: address.cityName
        town:
          type: string
          x-faker: address.cityName
        postcode:
          type: string
          x-faker:
            helpers.replaceSymbols: "??# #??"
        country:
          type: string
          format: ISO-3166-1
          minLength: 2
          maxLength: 2
          x-faker: address.countryCode
      additionalProperties: false
      example:
        line1: Flat 3
        line2: 42 Primrose Lane
        line3: Greenfields
        town: Manchester
        postcode: M17 2XY
        country: GB
    Person:
      type: object
      required:
        - firstNames
        - lastName
        - address
      properties:
        firstNames:
          type: string
          x-faker: name.firstName
        lastName:
          type: string
          x-faker: name.lastName
        address:
          $ref: "#/components/schemas/Address"
      additionalProperties: false
    Donor:
      allOf:
        - $ref: "#/components/schemas/Person"
      type: object
      required:
        - dateOfBirth
        - email
      properties:
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
          x-faker: internet.email
        otherNamesKnownBy:
          type: string
          nullable: true
          x-faker: name.findName
      additionalProperties: false
    Attorney:
      allOf:
        - $ref: "#/components/schemas/Person"
      type: object
      required:
        - dateOfBirth
        - email
        - status
      properties:
        dateOfBirth:
          type: string
          format: date
        email:
          type: string
          x-faker: internet.email
        status:
          type: string
          enum:
            - active
            - replacement
            - removed
    TrustCorporation:
      type: object
      required:
        - name
        - companyNumber
        - email
        - address
        - status
      properties:
        name:
          type: string
        companyNumber:
          type: string
        email:
          type: string
          x-faker: internet.email
        address:
          $ref: "#/components/schemas/Address"
        status:
          type: string
          enum:
            - active
            - replacement
            - removed
    CertificateProvider:
      allOf:
        - $ref: "#/components/schemas/Person"
      type: object
      required:
        - email
        - channel
      properties:
        email:
          type: string
          x-faker: internet.email
        channel:
          type: string
          enum:
            - paper
            - online
    PersonToNotify:
      allOf:
        - $ref: "#/components/schemas/Person"
      type: object
    Update:
      type: object
      required:
        - type
        - changes
      properties:
        type:
          enum:
            - CERTIFICATE_PROVIDER_SIGN
        changes:
          type: array
          items:
            type: object
            required:
              - key
              - old
              - new
            properties:
              key:
                type: string
              old:
                nullable: true
              new:
                nullable: true
