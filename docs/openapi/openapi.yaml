openapi: "3.1.0"
info:
  title: LPA Store
  version: "1.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://lpa-store.api.opg.service.justice.gov.uk
    description: Production
  - url: https://preproduction.lpa-store.api.opg.service.justice.gov.uk
    description: Preproduction
  - url: https://development.lpa-store.api.opg.service.justice.gov.uk
    description: Development
security:
  - {}
x-json-schema-faker:
  alwaysFakeOptionals: false
  optionalsProbability: 0.5
paths:
  /lpas/{uid}:
    parameters:
      - name: uid
        in: path
        required: true
        description: The UID of the case
        schema:
          type: string
          pattern: "M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})"
          example: M-789Q-P4DF-4UX3
    put:
      operationId: putLpa
      summary: Store an LPA
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitialLpa"
      responses:
        "201":
          description: Case created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
    get:
      operationId: getLpa
      summary: Retrieve an LPA
      responses:
        "200":
          description: Case found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lpa"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "404":
          description: Case not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
  /lpas/{uid}/updates:
    parameters:
      - name: uid
        in: path
        required: true
        description: The UID of the case
        schema:
          type: string
          pattern: "M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})"
          example: M-789Q-P4DF-4UX3
    post:
      operationId: createUpdate
      summary: Update an LPA
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update"
      responses:
        "201":
          description: Update created
          content:
            application/json:
              schema:
                type: object
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
  /health-check:
    get:
      operationId: healthCheck
      summary: Health check endpoint for external services to consume
      responses:
        "200":
          description: Healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                additionalProperties: false
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Unhealthy
                additionalProperties: false

components:
  schemas:
    AbstractError:
      type: object
      required:
        - code
        - detail
      properties:
        code:
          type: string
        detail:
          type: string
    BadRequestError:
      allOf:
        - $ref: "#/components/schemas/AbstractError"
        - type: object
          properties:
            code:
              enum: ["INVALID_REQUEST"]
            errors:
              type: array
              items:
                type: object
                required:
                  - source
                  - detail
                properties:
                  source:
                    type: string
                    format: jsonpointer
                  detail:
                    type: string
              example:
                - source: "/uid"
                  detail: "invalid uid format"
    NotFoundError:
      allOf:
        - $ref: "#/components/schemas/AbstractError"
        - type: object
          properties:
            code:
              enum: ["NOT_FOUND"]
    Lpa:
      allOf:
        - $ref: "#/components/schemas/InitialLpa"
      type: object
      required:
        - uid
        - status
        - registrationDate
        - updatedAt
      properties:
        uid:
          type: string
          pattern: M-([A-Z0-9]{4})-([A-Z0-9]{4})-([A-Z0-9]{4})
          example: M-789Q-P4DF-4UX3
        status:
          type: string
          enum:
            - processing
            - registered
        registrationDate:
          oneOf:
            - type: string
              format: date
            - type: "null"
        updatedAt:
          type: string
          format: date
      additionalProperties: false
    InitialLpa:
      $ref: "../schemas/2024-04/lpa.json"
    Update:
      type: object
      required:
        - type
        - changes
      properties:
        type:
          enum:
            - CERTIFICATE_PROVIDER_SIGN
            - ATTORNEY_SIGN
            - TRUST_CORPORATION_SIGN
        changes:
          type: array
          items:
            type: object
            required:
              - key
              - old
              - new
            properties:
              key:
                type: string
              old:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: "null"
              new:
                oneOf:
                  - type: string
                  - type: number
                  - type: boolean
                  - type: "null"
